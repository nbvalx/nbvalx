name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 0 * * WED"
  workflow_dispatch:
    inputs:
      index:
        description: "The package index, e.g. PyPI or TestPyPI, from which to install the package. If empty, the package will not be installed from any package index, but from the current git clone"
      index_version:
        description: "The version of the package to be installed from the package index. If empty, the latest version will be installed. Only used when index is non empty."
  workflow_call:
    inputs:
      ref:
        description: "The branch, tag or SHA to checkout"
        type: string
      index:
        description: "The package index, e.g. PyPI or TestPyPI, from which to install the package. If empty, the package will not be installed from any package index, but from the current git clone"
        type: string
      index_version:
        description: "The version of the package to be installed from the package index. If empty, the latest version will be installed. Only used when index is non empty."
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Install OpenMPI
        run: |
          sudo apt install libopenmpi-dev
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Manually install pytest of the v8.0.* series
        run: |
          python3 -m pip install "pytest < 8.1"
      - name: Wait for package index availability (PyPI and TestPyPI only)
        if: (inputs || github.event.inputs).index != '' && (inputs || github.event.inputs).index_version != ''
        run: |
          INDEX=${{ (inputs || github.event.inputs).index }}
          INDEX_VERSION=${{ (inputs || github.event.inputs).index_version }}
          PACKAGE_NAME="nbvalx"
          if [[ "${INDEX}" == "TestPyPI" ]]; then
            INDEX_URL=https://test.pypi.org
          elif [[ "${INDEX}" == "PyPI" ]]; then
            INDEX_URL=https://pypi.org
          else
            echo "Invalid package index" && exit 1
          fi
          COUNTER=0
          INDEX_VERSION_FOUND=0
          while [[ ${INDEX_VERSION_FOUND} -ne 1 ]]; do
            pip install --no-cache-dir --index-url ${INDEX_URL}/simple/ ${PACKAGE_NAME}== 2> all_${PACKAGE_NAME}_versions || true
            if grep -q ${INDEX_VERSION} all_${PACKAGE_NAME}_versions; then
              INDEX_VERSION_FOUND=1
            fi
            [[ ${INDEX_VERSION_FOUND} -ne 1 && ${COUNTER} -eq 5 ]] && echo "Giving up on finding version ${INDEX_VERSION} on ${INDEX_URL}" && exit 1
            [[ ${INDEX_VERSION_FOUND} -ne 1 ]] && echo "Cannot find version ${INDEX_VERSION} on ${INDEX_URL}, attempt ${COUNTER}: trying again after a short pause" && sleep 10
            [[ ${INDEX_VERSION_FOUND} -eq 1 ]] && echo "Found version ${INDEX_VERSION} on ${INDEX_URL}, attempt ${COUNTER}"
            COUNTER=$((COUNTER+1))
          done
        shell: bash
      - name: Install nbvalx (PyPI and TestPyPI only)
        if: (inputs || github.event.inputs).index != ''
        run: |
          INDEX=${{ (inputs || github.event.inputs).index }}
          INDEX_VERSION=${{ (inputs || github.event.inputs).index_version }}
          PACKAGE_NAME="nbvalx"
          if [[ "${INDEX}" == "TestPyPI" ]]; then
            INDEX_FLAGS="--no-cache-dir --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/"
          elif [[ "${INDEX}" == "PyPI" ]]; then
            INDEX_FLAGS="--no-cache-dir"
          else
            echo "Invalid package index" && exit 1
          fi
          if [[ -n "${INDEX_VERSION}" ]]; then
            PACKAGE_VERSION="==${INDEX_VERSION}"
            echo "Installing version ${INDEX_VERSION} from ${INDEX}"
          else
            PACKAGE_VERSION=""
            echo "Installing latest version from ${INDEX}"
          fi
          python3 -m pip install ${INDEX_FLAGS} ${PACKAGE_NAME}[docs,lint,notebooks,tests,unit-tests]${PACKAGE_VERSION}
        shell: bash
      - name: Install nbvalx (git clone only)
        if: (inputs || github.event.inputs).index == ''
        run: |
          python3 -m pip install .[docs,lint,notebooks,tests,unit-tests]
      - name: Clean build files
        run: |
          git clean -xdf
      - name: Run ruff on python files
        run: |
          python3 -m ruff .
      - name: Run isort on python files
        run: |
          python3 -m isort --check --diff .
      - name: Run yamllint on workflows
        run: |
          python3 -m yamllint -d "{extends: default, rules: {document-start: {present: false}, line-length: disable, truthy: {check-keys: false}}}" .
      - name: Run documentation generation
        run: |
          cd docs && python3 -m sphinx -W -b html . build/html
      - name: Run unit tests (serial)
        run: |
          COVERAGE_FILE=.coverage_unit_serial python3 -m coverage run --source=nbvalx -m pytest tests/unit
      - name: Run unit tests (parallel)
        run: |
          COVERAGE_FILE=.coverage_unit_parallel mpirun -n 2 python3 -m coverage run --source=nbvalx --parallel-mode -m pytest tests/unit
      - name: Generate notebooks test files
        run: |
          NO_TESTS_COLLECTED=5
          COVERAGE_FILE=.coverage_notebooks_serial_create_without_collapse python3 -m coverage run --source=nbvalx -m pytest --coverage-run-allow --link-data-in-work-dir="**/coverage_mock_module.py" --ipynb-action=create-notebooks tests/notebooks || (($?==$NO_TESTS_COLLECTED))
          COVERAGE_FILE=.coverage_notebooks_serial_create_with_collapse python3 -m coverage run --source=nbvalx -m pytest --coverage-run-allow --link-data-in-work-dir="**/coverage_mock_module.py" --ipynb-action=create-notebooks --tag-collapse tests/notebooks || (($?==$NO_TESTS_COLLECTED))
          COVERAGE_FILE=.coverage_notebooks_parallel_create_without_collapse python3 -m coverage run --source=nbvalx -m pytest --coverage-run-allow --link-data-in-work-dir="**/coverage_mock_module.py" --ipynb-action=create-notebooks --np=2 tests/notebooks || (($?==$NO_TESTS_COLLECTED))
          COVERAGE_FILE=.coverage_notebooks_parallel_create_with_collapse python3 -m coverage run --source=nbvalx  -m pytest --coverage-run-allow --link-data-in-work-dir="**/coverage_mock_module.py" --ipynb-action=create-notebooks --tag-collapse --np=2 tests/notebooks || (($?==$NO_TESTS_COLLECTED))
        shell: bash
      - name: Run ruff on notebooks test files
        run: |
          python3 -m nbqa ruff .
      - name: Run isort on notebooks test files
        run: |
          python3 -m nbqa isort --check --diff .
      - name: Check for stray outputs, counts and metadata in notebooks test files
        uses: RBniCS/check-jupyter-metadata-action@main
        with:
          pattern: "tests/notebooks/data/**/*.ipynb"
      - name: Run notebooks tests (serial, without collapse)
        run: |
          COVERAGE_FILE=.coverage_notebooks_serial_without_collapse python3 -m coverage run --source=nbvalx -m pytest --coverage-run-allow --link-data-in-work-dir="**/coverage_mock_module.py" tests/notebooks
      - name: Run notebooks tests (serial, with collapse)
        run: |
          COVERAGE_FILE=.coverage_notebooks_serial_with_collapse python3 -m coverage run --source=nbvalx -m pytest --coverage-run-allow --link-data-in-work-dir="**/coverage_mock_module.py" --tag-collapse tests/notebooks
      - name: Run notebooks tests (parallel)
        run: |
          COVERAGE_FILE=.coverage_notebooks_parallel python3 -m coverage run --source=nbvalx -m pytest --np=2 --coverage-run-allow --link-data-in-work-dir="**/coverage_mock_module.py" tests/notebooks
      - name: Run notebooks tests (coverage source set nbvalx itself)
        run: |
          COVERAGE_FILE=.coverage_notebooks_coverage_nbvalx python3 -m coverage run --source=nbvalx -m pytest --coverage-run-allow --coverage-source=nbvalx --link-data-in-work-dir="**/coverage_mock_module.py" tests/notebooks
      - name: Combine coverage reports
        run: |
          python3 -m coverage combine .coverage*
          python3 -m coverage report --fail-under=100 --show-missing --skip-covered
          rm .coverage*
      - name: Run notebooks tests (coverage source set to a mock external module)
        run: |
          COVERAGE_FILE=.coverage_notebooks_coverage_external python3 -m pytest --coverage-source=coverage_mock_module --link-data-in-work-dir="**/coverage_mock_module.py" tests/notebooks
      - name: Combine coverage reports (coverage source set to a mock external module)
        run: |
          python3 -m coverage combine .coverage*
          python3 -m coverage report --fail-under=100 --show-missing --skip-covered
          rm .coverage*
      - name: Upload notebooks logs as an artifact in case of failure
        if: failure() || cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: "notebooks-logs-${{ matrix.python-version }}"
          path: |
            **/.ipynb_pytest/**/*.log*

  warn:
    runs-on: ubuntu-latest
    if: github.repository == 'nbvalx/nbvalx' && github.ref == 'refs/heads/main' && github.event_name == 'schedule'
    steps:
      - name: Warn if scheduled workflow is about to be disabled
        uses: fem-on-colab/warn-workflow-about-to-be-disabled-action@main
        with:
          workflow-filename: ci.yml
          days-elapsed: 50
